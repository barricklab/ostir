diff --git a/RBS_Calculator.py b/RBS_Calculator.py
index 30fc464..564f8de 100755
--- a/RBS_Calculator.py
+++ b/RBS_Calculator.py
@@ -72,7 +72,7 @@ class RBS_Calculator(NuPACK):
         self.rRNA_len = len(self.rRNA)
         self.mRNA_len = len(self.mRNA_input)
         self.total_sequence_length = len(mRNA) + len(self.rRNA)
-        self.dG_rRNA = self.calc_dG_rRNA()
+        #self.dG_rRNA = self.calc_dG_rRNA()
         self.run = 0
         self.start_range = start_range
         self.verbose = verbose
diff --git a/Run_RBS_Calculator.py b/Run_RBS_Calculator.py
index f7ca808..204a180 100755
--- a/Run_RBS_Calculator.py
+++ b/Run_RBS_Calculator.py
@@ -18,6 +18,26 @@
 from RBS_Calculator import RBS_Calculator
 import sys, math
 
+def parse_fasta(filepath):
+    '''Takes a filepath to a fasta formatted file and returns a list of [header, sequence].'''
+    sequences = []
+    current_seq_name = None
+    current_seq = ""
+    with open(filepath, 'r') as infile:
+        for line in infile:
+            linestr = line.decode('utf8') if isinstance(line, bytes) else line
+            if linestr[0] == '>':
+                if current_seq_name:
+                    sequences.append([current_seq_name, current_seq])
+                current_seq_name = linestr[1:].rstrip()
+                current_seq = ""
+                continue
+            else:
+                current_seq += linestr.rstrip()
+    if current_seq_name:
+        sequences.append([current_seq_name, current_seq])
+    return current_seq
+
 if __name__ == "__main__":
     #Read command line arguments
     input_args = []
@@ -31,6 +51,7 @@ if __name__ == "__main__":
         start = input_args[2]
     elif len(input_args) == 2:
         seq = input_args[1]
+        seq = parse_fasta(seq)
     else:
         output = "Usage: " + input_args[0] + " [RNA/DNA Sequence] (start position)" + "\n"
         print output
@@ -56,4 +77,4 @@ if __name__ == "__main__":
 
     print len(expr_list)
     for (expr,start_pos,ks) in zip(expr_list,start_pos_list,kinetic_score_list):
-        print start_pos, expr, ks
\ No newline at end of file
+        print start_pos, expr, ks
